#!/bin/bash

# =========================================
# NExTScan
# =========================================
# Beschreibung: Modularer Netzwerk-Security Scanner
# Autor: Pascal Hocher
# Datum: 2025.06.04


# Globale Arrays
reachable_ips=()
unreachable_ips=()




# Konfiguration laden
source ./src/meta.configs.sh



# Module laden
source_module() {
    local module_path=$1
    if [[ -f "$module_path" ]]; then
        source "$module_path"
        echo "Modul geladen: $module_path"
    else
        echo "Modul nicht gefunden: $module_path"
        exit 1
    fi
}

# Alle benötigten Module laden
load_modules() {
    echo "Lade Module..."
    
    
    # Core Module
    source_module "./src/core/logging.sh"
    source_module "./src/core/cleanup.sh"
    source_module "./src/core/validation.sh"
    source_module "./src/core/network.sh"
    
    # Scanner Module
    source_module "./src/scanners/nmap_scanner.sh"

    
    # Reporting Module
    source_module "./src/reporting/html_generator.sh"
    
    log_success "Alle Module erfolgreich geladen"
}




# Vervollständige deine start_scanning Funktion
start_scanning() {
    local output_dir=$1
    log_info "Starte detaillierten Scan für ${#reachable_ips[@]} erreichbare IPs..."

    local html_file
    html_file=$(create_html_report "$output_dir")

    for ip in "${reachable_ips[@]}"; do
        log_info "=== Beginne Scan für $ip ==="

        
        echo "<div class=\"host-section\">" >>"$html_file"
        add_to_html "$html_file" "<h2>Scan Ergebnisse für $ip</h2>" "info" true

        # Port Scan
        port_scan "$ip" "$output_dir"        

        # Service Detection
        service_detection "$ip" "$output_dir"

        # Vulnerability Scan
        vul_scan "$ip" "$output_dir"

        # OS detection
        os_detection  "$ip" "$output_dir"
        

        add

        
        echo "</div>" >>"$html_file"

        log_success "Scan für $ip abgeschlossen"
    done

    finalize_html_report "$html_file"
    cleanup "$output_dir"
    log_success "Detaillierter Scan abgeschlossen. Ergebnisse gespeichert in: $html_file"
}




# Main Menu
show_menu() {
    echo ""
    echo "Wähle eine Option:"
    echo "1) Einzelnen Host per IP-Adresse scannen"
    echo "2) Einzelnen Host per Hostname scannen"
    echo "3) Alle ips anzeigen"
    echo "4) Letzten Report öffnen"
    echo "5) Beenden"
    echo ""
}

# Main Function
main() {

    load_modules

    show_banner
    check_requirements

    # Output-Verzeichnis erstellen
    output_dir="scan_reports/scan_results_$(date +%Y%m%d_%H%M%S)"
    
    
    while true; do
        show_menu
        read -p "Deine Wahl: " choice

        case $choice in
            1)
                
                read -p "Gib die IP-Adresse ein: " target_ip
                if validate_ip "$target_ip"; then
                    if check_ip_reachability "$target_ip"; then
                        mkdir -p "$output_dir"
                        log_info "Ergebnisse werden gespeichert in: $output_dir"
                        start_scanning "$output_dir"
                    else
                        log_error "$target_ip ist nicht erreichbar"
                    fi
                else
                    log_error "$target_ip ist keine gültige IP-Adresse"
                fi
                ;;
            2)
                
                read -p "Gib den Namen des Gerätes ein: " target_host
                log_info "Löse Hostname $target_host auf..."
                target_ip=$(hostname_finder "$target_host")
                if [[ -n "$target_ip" ]]; then
                    log_success "Hostname aufgelöst: $target_host -> $target_ip"
                    if check_ip_reachability "$target_ip"; then
                        start_scanning "$output_dir"
                    else
                        log_error "$target_host ($target_ip) ist nicht erreichbar"
                    fi
                else
                    log_error "Hostname $target_host konnte nicht aufgelöst werden"
                fi
                ;;
            3)
                read -p "Gib das Netzwerk ein (z.B. 192.168.1.0/24): " target_network
                if validate_network "$target_network"; then
                    network_ips "$target_network"
                else
                    log_error "$target_network ist kein gültiges Netzwerk-Format"
                fi
                ;;
            4)
                open_last_report
                ;;
            5)
                log_info "Beende Scanner..."
                exit 0
                ;;
            *)
                log_error "Ungültige Auswahl!"
                ;;
        esac

        echo ""
        read -p "Drücke Enter um fortzufahren..."
    done
}

# Script starten
main "$@"